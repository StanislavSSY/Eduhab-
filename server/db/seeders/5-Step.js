"use strict";

/** @type {import('sequelize-cli').Migration} */
module.exports = {
  async up(queryInterface, Sequelize) {
    await queryInterface.bulkInsert(
      "Steps",
      [
        {
          lessonid: 1,
          type: "TEXT",
          data: "<h2>Тег H1</h2><p>простой тег h1</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 1,
          type: "TEXT",
          data: "<h2>Тег H2</h2><p>простой тег h2</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 2,
          type: "TEXT",
          data: "<h2>Тег link css</h2><p>простой тег link css</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 2,
          type: "TEXT",
          data: "<h2>Тег link js</h2><p>простой тег link js</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 3,
          type: "TEXT",
          data: "<h2>Тег td</h2><p>простой тег td</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 3,
          type: "TEXT",
          data: "<h2>Тег th</h2><p>простой тег th</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 4,
          type: "TEXT",
          data: "<h2>Тег img</h2><p>простой тег img</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 4,
          type: "TEXT",
          data: "<h2>Тег svg</h2><p>простой тег svg</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 5,
          type: "TEXT",
          data: "<h2>Тег H1</h2><p>простой тег h1</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 5,
          type: "TEXT",
          data: "<h2>Тег H2</h2><p>простой тег h2</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 6,
          type: "TEXT",
          data: "<h2>Тег link css</h2><p>простой тег link css</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 6,
          type: "TEXT",
          data: "<h2>Тег link js</h2><p>простой тег link js</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 7,
          type: "TEXT",
          data: "<h2>Тег td</h2><p>простой тег td</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 7,
          type: "TEXT",
          data: "<h2>Тег th</h2><p>простой тег th</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 8,
          type: "TEXT",
          data: "<h2>Тег img</h2><p>простой тег img</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 8,
          type: "TEXT",
          data: "<h2>Тег svg</h2><p>простой тег svg</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 9,
          type: "TEXT",
          data: "<h2>Тег H1</h2><p>простой тег h1</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 9,
          type: "TEXT",
          data: "<h2>Тег H2</h2><p>простой тег h2</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 10,
          type: "TEXT",
          data: "<h2>Тег link css</h2><p>простой тег link css</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 10,
          type: "TEXT",
          data: "<h2>Тег link js</h2><p>простой тег link js</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 11,
          type: "TEXT",
          data: "<h2>Тег td</h2><p>простой тег td</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 11,
          type: "TEXT",
          data: "<h2>Тег th</h2><p>простой тег th</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 12,
          type: "TEXT",
          data: "<h2>Тег img</h2><p>простой тег img</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 12,
          type: "TEXT",
          data: "<h2>Тег svg</h2><p>простой тег svg</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 13,
          type: "TEXT",
          data: "<h2>Тег H1</h2><p>простой тег h1</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 13,
          type: "TEXT",
          data: "<h2>Тег H2</h2><p>простой тег h2</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 14,
          type: "TEXT",
          data: "<h2>Тег link css</h2><p>простой тег link css</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 14,
          type: "TEXT",
          data: "<h2>Тег link js</h2><p>простой тег link js</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 15,
          type: "TEXT",
          data: "<h2>Тег td</h2><p>простой тег td</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 15,
          type: "TEXT",
          data: "<h2>Тег th</h2><p>простой тег th</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 16,
          type: "TEXT",
          data: "<h2>Тег img</h2><p>простой тег img</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 16,
          type: "TEXT",
          data: "<h2>Тег svg</h2><p>простой тег svg</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 17,
          type: "TEXT",
          data: "<p>JavaScript - это высокоуровневый, интерпретируемый язык программирования, который применяется в веб-разработке для создания динамических и интерактивных веб-страниц. Разработаный Netscape, JavaScript стал одним из ключевых инструментов в создании современных веб-приложений. Он позволяет добавлять интерактивные элементы, обрабатывать события пользователя и обеспечивать динамическое обновление содержимого страницы без перезагрузки.</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 17,
          type: "TEXT",
          data: "<p>Основной компонент JavaScript - это скрипт, который представляет собой набор инструкций, выполняемых по мере загрузки страницы. Скрипты могут быть встроены непосредственно в HTML с помощью тега <script>, а также подключены из внешних файлов. Это позволяет создавать структурированный и переиспользуемый код.</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 17,
          type: "TEXT",
          data: "<p>При подключении JavaScript-скрипта к HTML-документу, важно определить его расположение - внутри <head> или перед закрывающим тегом <body>. Это влияет на время загрузки и выполнения скрипта. Первичное понимание роли JavaScript и методов его подключения представляют собой базу для изучения этого языка программирования.</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 18,
          type: "TEXT",
          data: "<p>JavaScript использует переменные для хранения данных и манипуляций ими. Переменные объявляются с использованием ключевых слов var, let или const. Каждая переменная имеет свое имя, которое должно быть уникальным в контексте, и к ней можно присвоить значение. Тип данных переменной определяется значением, которое она содержит.</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 18,
          type: "TEXT",
          data: "<p>В JavaScript существует несколько основных типов данных. Строки (string) представляют последовательность символов и могут быть созданы с использованием одинарных или двойных кавычек. Числа (number) могут быть целыми или с плавающей точкой. Булевы значения (boolean) могут быть true или false.</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 18,
          type: "TEXT",
          data: "<p>Операции с переменными включают арифметические действия (сложение, вычитание, умножение, деление), конкатенацию строк (объединение строк) и сравнения значений. Операторы сравнения, такие как ==, !=, >, <, могут использоваться для проверки условий. Освоение переменных и типов данных важно для создания динамических и адаптивных программ на JavaScript.</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 19,
          type: "TEXT",
          data: "<p>Управляющие конструкции в JavaScript позволяют создавать условия и циклы для управления потоком выполнения программы. Условные операторы (if, else if, else) используются для выполнения кода в зависимости от истинности определенного условия. Циклы (for, while) позволяют повторять блок кода несколько раз. <br/> Конструкция if позволяет выполнить определенный блок кода, если условие истинно. Оператор else if добавляет дополнительные условия для проверки, а else выполняется, если ни одно из предыдущих условий не было истинным.</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 19,
          type: "TEXT",
          data: "<p>Цикл for предоставляет удобный способ повторить блок кода заданное количество раз. Он имеет три части: инициализация, условие продолжения и обновление. Цикл while повторяется, пока условие истинно. <br/> Понимание условных операторов и циклов - это ключевая часть освоения программирования на JavaScript, позволяя создавать более сложные и эффективные программы.</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 20,
          type: "TEXT",
          data: "<p>Функции - это фундаментальные строительные блоки программы в JavaScript. Они позволяют упорядочивать и структурировать код, делая его более читаемым и поддерживаемым. Функции могут принимать параметры и возвращать значения, что делает их мощным инструментом для создания переиспользуемых и модульных программ.</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 20,
          type: "TEXT",
          data: "<p>Создание функции начинается с ключевого слова function, за которым следует имя функции. Параметры функции указываются в скобках, а тело функции заключается в фигурные скобки {}. Функции могут возвращать значения с помощью ключевого слова return.</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 20,
          type: "TEXT",
          data: "<p>Область видимости переменных в функциях важна для понимания того, как переменные взаимодействуют внутри и вне функций. Переменные, объявленные внутри функции, считаются локальными и доступны только внутри этой функции. Глобальные переменные доступны в любом месте программы. <br/> Функции также могут быть присвоены переменным, переданы как аргументы в другие функции и возвращены из функций. Эти концепции делают функции важным элементом программирования на JavaScript.</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 21,
          type: "TEXT",
          data: "<p>Массивы в JavaScript представляют собой удобные структуры данных для хранения и обработки упорядоченных элементов. Они обеспечивают эффективный способ работы с коллекциями данных. Создание массива осуществляется с использованием квадратных скобок [], внутри которых указываются элементы, разделенные запятыми.</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 21,
          type: "TEXT",
          data: "<p>Основные операции с массивами включают добавление элементов (метод push), удаление элементов с конца массива (метод pop), добавление элементов в начало массива (метод unshift) и удаление элементов из начала массива (метод shift). Метод splice используется для изменения содержимого массива, вставки или удаления элементов.</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 21,
          type: "TEXT",
          data: "<p>Массивы также обладают множеством встроенных методов, таких как forEach, map, filter, которые облегчают их обработку. Отличительной чертой массивов в JavaScript является то, что они могут содержать элементы различных типов данных. <br/> Понимание работы с массивами открывает широкие возможности для обработки данных в программах на JavaScript.</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 22,
          type: "TEXT",
          data: "<p>Объекты в JavaScript позволяют группировать данные и функции в единый компонент. Они представляют собой коллекции пар ключ-значение, где ключи являются строками. Объекты создаются с использованием фигурных скобок {}, внутри которых указываются свойства объекта в виде пар ключ-значение.</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 22,
          type: "TEXT",
          data: "<p>Свойства объекта могут быть строками или символами и представляют собой значения, связанные с ключами. Функции в объектах называются методами. Доступ к свойствам и методам объекта осуществляется с использованием точечной нотации (object.property или object.method()).</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 22,
          type: "TEXT",
          data: "<p>Основные принципы работы с объектами включают создание объектов, добавление и удаление свойств, обращение к свойствам и методам. Операции с объектами, такие как клонирование и слияние, также широко используются в программировании на JavaScript. <br/> Понимание объектов является важной частью веб-разработки, где объекты часто используются для представления различных элементов интерфейса и данных.</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 23,
          type: "TEXT",
          data: "<p>DOM (Document Object Model) представляет собой иерархию объектов, представляющих структуру HTML-документа. JavaScript может взаимодействовать с этими объектами для изменения содержимого и структуры веб-страницы. Это делает DOM мощным инструментом для создания интерактивных пользовательских интерфейсов.</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 23,
          type: "TEXT",
          data: "<p>Основные операции с DOM включают выбор элементов, изменение их содержимого, добавление и удаление элементов. Выбор элементов может осуществляться с использованием методов, таких как getElementById, getElementsByClassName, querySelector, а также манипуляции классами и атрибутами.</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 23,
          type: "TEXT",
          data: "<p>События позволяют реагировать на действия пользователя, такие как клики, ввод данных или изменение размеров окна. Обработка событий осуществляется с использованием слушателей событий (event listeners), которые могут вызывать функции при возникновении определенного события.</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 23,
          type: "TEXT",
          data: "<p>Современные веб-приложения активно используют DOM и события для создания динамических и отзывчивых интерфейсов, поэтому понимание работы с DOM и событиями является важным аспектом веб-разработки.</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 24,
          type: "TEXT",
          data: "<p>JavaScript поддерживает асинхронное выполнение кода, что позволяет создавать отзывчивые веб-приложения. Асинхронность осуществляется с использованием колбэков, промисов и асинхронных функций. Это позволяет выполнять операции, не блокируя основной поток выполнения.</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 24,
          type: "TEXT",
          data: "<p>Таймеры (setTimeout, setInterval) позволяют задерживать выполнение кода или выполнять его периодически. Колбэки используются для обработки завершения асинхронных операций. Промисы предоставляют удобный способ обработки асинхронных событий, позволяя создавать цепочки операций.</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
        {
          lessonid: 24,
          type: "TEXT",
          data: "<p>AJAX (Asynchronous JavaScript and XML) позволяет обмениваться данными между браузером и сервером без перезагрузки страницы. Это осуществляется с использованием объекта XMLHttpRequest или современного API Fetch. </br> Освоение асинхронности и AJAX расширяет возможности веб-разработчика, обеспечивая эффективное взаимодействие с сервером и создание более отзывчивых веб-приложений.</p>",
          createdAt: new Date(),
          updatedAt: new Date(),
        },
      ],
      {}
    );
  },

  async down(queryInterface, Sequelize) {
    await queryInterface.bulkDelete("Steps", null, {});
  },
};
